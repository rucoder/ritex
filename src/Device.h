/*
 * Device.h
 *
 *  Created on: Apr 23, 2013
 *      Author: ruinmmal
 */

#ifndef DEVICE_H_
#define DEVICE_H_

#include "Device.h"
#include "IAdapter.h"

#include "DeviceChannel.h"
#include "Sensor.h"

//#include "DeviceExecutableCommand.h"
#include "DeviceCommand.h"
#include "CmdLineCommand.h"

#include <list>

//consists of channels and sensors. each sensor has its own channels
class Device {
protected:
	std::list<Sensor*> m_sensorList;
	std::list<DeviceChannel*> m_deviceChannelList;
	int m_deviceId; // ID generated by installation system. Not set until passed from command line
	//link to interface to the world
	IAdapter* m_pAdapter;
	//virtual DeviceExecutableCommand* CreateExecutableCommand(DeviceCommand* cmd);
public:
	Device(){};
	Device(IAdapter* pAdapter);
	virtual ~Device();
	bool AddSensor(Sensor* pSensor);
	bool AddChannel(DeviceChannel* pChannel);
	const std::list<Sensor*>& getSensors() const { return m_sensorList; };
	const std::list<DeviceChannel*>& getChannels() const { return m_deviceChannelList; };

	//From IDevice
	void setDeviceId(int devId) { m_deviceId = devId; };
	int getDeviceId() { return m_deviceId; };
    virtual DeviceCommand* CreateCommand(CmdLineCommand* pCommand);
    virtual DeviceCommand* CreateCommand(void* rawCommand, int length);
//	virtual DeviceCommand* CreateCommand(void* rawCommand, int length);
//	virtual DeviceCommand* CreateCommand(CmdLineCommand* pCommand);
//
//	//TODO: ADD REAL IMPLEMENTATION!
//	virtual bool StartDataLogging() { return true; };
//	virtual void SetParameterFilter() {} ;
//	virtual bool Execute(DeviceCommand* pCommand) { return true; };


	 void SetParameterFilter() {};
	 //bool Execute(DeviceCommand* pCommand) {};
	 bool StartDataLogging() { return false; }
};

#endif /* DEVICE_H_ */
